// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;

namespace Starmessage.Master.Tables
{
   public sealed partial class TestMasterTable : TableBase<TestMaster>, ITableUniqueValidate
   {
        public Func<TestMaster, string> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<TestMaster, string> primaryIndexSelector;


        public TestMasterTable(TestMaster[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => x.Key;
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();


        public TestMaster FindByKey(string key)
        {
            return FindUniqueCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, true);
        }
        
        public bool TryFindByKey(string key, out TestMaster result)
        {
            return TryFindUniqueCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, out result);
        }

        public TestMaster FindClosestByKey(string key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, selectLower);
        }

        public RangeView<TestMaster> FindRangeByKey(string min, string max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.StringComparer.Ordinal, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
#if !DISABLE_MASTERMEMORY_VALIDATOR

            ValidateUniqueCore(data, primaryIndexSelector, "Key", resultSet);       

#endif
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(TestMaster), typeof(TestMasterTable), "test_master",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(TestMaster).GetProperty("Key")),
                    new MasterMemory.Meta.MetaProperty(typeof(TestMaster).GetProperty("Value1")),
                    new MasterMemory.Meta.MetaProperty(typeof(TestMaster).GetProperty("Value2")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(TestMaster).GetProperty("Key"),
                    }, true, true, System.StringComparer.Ordinal),
                });
        }

#endif
    }
}